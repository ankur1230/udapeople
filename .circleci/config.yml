version: 2.1
orbs:
  slack: circleci/slack@4.12.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    steps:
      - run:
          name: Revert migrations
          when: on_success
          command: |
            export SUCCESS="$(curl --insecure https://kvdb.io/26CFVW9rVsg3weDY3qP1q9/migration_"${CIRCLE_WORKFLOW_ID:0:7}")"
            if(( SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan beckend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8e:8d:95:19:20:bb:d8:50:6f:23:3e:b1:e4:c3:64:2e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible aws-cli tar gzip
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- attach_workspace:
      #    at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/26CFVW9rVsg3weDY3qP1q9/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      #- revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
        user: root
    steps:
      - checkout
      - run: sudo apt-get install tar gzip -y
      - restore_cache:
          keys: [frontend-build]
      - install_awscli
      - install_nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      #- destroy-environment

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8e:8d:95:19:20:bb:d8:50:6f:23:3e:b1:e4:c3:64:2e"]
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_ansible
      - install_nodejs
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- scan-backend:
      #    requires: [build-backend]
      #- deploy-infrastructure
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- run-migrations
      #    requires: [configure-infrastructure]
      #- deploy-frontend
      #    requires: [configure-infrastructure]
      #    requires: [run-migrations]
      - deploy-backend
      #    requires: [configure-infrastructure]
      #    requires: [run-migrations]
